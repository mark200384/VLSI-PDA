#!/usr/bin/python3
# import required classes and functions
from myObject import Die, Component, SpecialNet
from write_def import write_def

# define global parameters
CS_WIDTH = 7100
CS_HEIGHT = 6600
M3_WIDTH = 440
M3_SPACING = 310
M4_WIDTH = 1000
M4_SPACING = 490

CS_X1_TO_DRAIN = 1260
CS_Y1_TO_DRAIN = 4100
CS_LIB_NAME = 'MSBCS'
VIA34_LIB_NAME = 'Via34'
k= 4
n=int((k*4)**0.5)
NumOfM3 = int(k**0.5)
NumOfM4 = int((k**0.5)/2)
##### Step 1: create die boundary #####
design_name = 'CS_APR'
die_x1 = 0
die_y1 = 0
die_x2 = CS_WIDTH*n + M3_SPACING*((NumOfM3+1)*n-1) + M3_WIDTH*NumOfM3*n
die_y2 = CS_HEIGHT*n + M4_SPACING*((NumOfM4+1)*n-1) + M4_WIDTH*NumOfM4*n
die = Die(design_name, die_x1, die_y1, die_x2, die_y2)
print("die_x2:",die_x2 ,"die_y2:",die_y2)

##### Step 2: create CS array #####
cs_array = [[Component for j in range(n)] for i in range(n)]
off_y = (M4_SPACING + M4_WIDTH)*NumOfM4
Dy = CS_HEIGHT + M4_SPACING*(NumOfM4+1) + M4_WIDTH*(NumOfM4)*1
Dx = CS_WIDTH + M3_SPACING*(NumOfM3+1) + M3_WIDTH*(NumOfM3)
for i in range(n):
    for j in range(n):
        cs_lib_name = CS_LIB_NAME
        cs_instance_name = 'Transistor' + str(i * n + j)
        x = i*Dx
        y = j*Dy + off_y
        cs_array[i][j] = Component(cs_lib_name, cs_instance_name, x, y)
        #print("cs_array[",i,"][",j,"]:",x,y)
##### Step 3: create vertical ME3 #####
# ME3 nets
ME3_specialnet = [[SpecialNet for j in range(int(n/2))] for i in range(n)]
Dx = CS_WIDTH + M3_SPACING
for i in range(n):
    for j in range(int(n/2)):
        inst_name = 'Metal3_' + str(i * (int(n/2)) + j)
        layer = 'ME3'
        x1 = cs_array[i][0]._x + Dx + j*(M3_SPACING+M3_WIDTH)
        x2 = x1 + M3_WIDTH
        y1 = 0
        y2 = die_y2
        ME3_specialnet[i][j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)
       
##### Step 4: create ME4 drain #####
# ME4 drains
ME4_specialnet_drain = [[SpecialNet for j in range(n)] for i in range(n)]
for i in range(int(n/2)): #4
    for j in range(int(n/2)): #4
        layer = 'ME4'
        # left bottom corner units
        inst_name = 'Metal4_drain_' + str(i * (int(n/2)) + j + 0 * k)
        x1 = cs_array[i][j]._x + CS_X1_TO_DRAIN
        x2 = ME3_specialnet[i][j]._x2
        y1 = cs_array[i][j]._y + CS_Y1_TO_DRAIN
        y2 = y1 + M4_WIDTH
        ME4_specialnet_drain[i][j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)
        # right bottom corner units
        inst_name = 'Metal4_drain_' + str(i * (int(n/2)) + j + 1 * k)
        x1 = cs_array[n-1-i][j]._x + CS_X1_TO_DRAIN
        x2 = ME3_specialnet[n-1-i][j]._x2
        y1 = cs_array[n-1-i][j]._y + CS_Y1_TO_DRAIN
        y2 = y1 + M4_WIDTH
        ME4_specialnet_drain[n-1-i][j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)
        # left top corner units
        inst_name = 'Metal4_drain_' + str(i * (int(n/2)) + j + 2 * k)
        x1 = cs_array[i][n-1-j]._x + CS_X1_TO_DRAIN
        x2 = ME3_specialnet[i][j]._x2
        y1 = cs_array[i][n-1-j]._y + CS_Y1_TO_DRAIN
        y2 = y1 + M4_WIDTH
        ME4_specialnet_drain[i][n-1-j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)
        # right top corner units
        inst_name = 'Metal4_drain_' + str(i * (int(n/2)) + j + 3 * k)
        x1 = cs_array[n-1-i][n-1-j]._x + CS_X1_TO_DRAIN 
        x2 = ME3_specialnet[n-1-i][j]._x2
        y1 = cs_array[n-1-i][n-1-j]._y + CS_Y1_TO_DRAIN
        y2 = y1 + M4_WIDTH
        ME4_specialnet_drain[n-1-i][n-1-j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)

##### Step 5: create ME4 port #####
# ME4 ports
ME4_specialnet_port = [SpecialNet for i in range(n*NumOfM4)]
for i in range(n): #n=16
    x1 = 0
    x2 = die_x2
    y1 = i*Dy
    for j in range(NumOfM4): #0~3
        inst_name = 'Metal4_port_' + str(i*NumOfM4+j)
        layer = 'ME4'
        if(j==0):
            y1=y1
        else:
            y1 = y1 + (M4_SPACING+M4_WIDTH)
        y2 = y1 + M4_WIDTH
        print("M4(",i*NumOfM4+j,"):y1:",y1 ," y2:",y2 )
        ME4_specialnet_port[i*NumOfM4+j] = SpecialNet(inst_name, layer, x1, y1, x2, y2)
##### Step 6: create Via34 from ME4 drain #####
# drain to ME3
Via34_drain2ME3 = [[Component for j in range(n)] for i in range(n)]
for i in range(int(n/2)):
    for j in range(int(n/2)):
        lib_name = VIA34_LIB_NAME
        # left bottom corner units
        inst_name = 'Via34_drain2ME3_' + str(i * (int(n/2)) + j + 0 * k)
        x = ME3_specialnet[i][j]._x1
        y = cs_array[i][j]._y + CS_Y1_TO_DRAIN
        Via34_drain2ME3[i][j] = Component(lib_name, inst_name, x, y)
        # right bottom corner units
        inst_name = 'Via34_drain2ME3_' + str(i * (int(n/2)) + j + 1 * k)
        x = ME3_specialnet[n-1-i][j]._x1
        y = cs_array[n-1-i][j]._y + CS_Y1_TO_DRAIN
        Via34_drain2ME3[n-1-i][j] = Component(lib_name, inst_name, x, y)
        # left top corner units
        inst_name = 'Via34_drain2ME3_' + str(i * (int(n/2)) + j + 2 * k)
        x = ME3_specialnet[i][j]._x1
        y = cs_array[i][n-1-j]._y + CS_Y1_TO_DRAIN
        Via34_drain2ME3[i][n-1-j] = Component(lib_name, inst_name, x, y)
        # right top corner units
        inst_name = 'Via34_drain2ME3_' + str(i * (int(n/2)) + j + 3 * k)
        x = ME3_specialnet[n-1-i][j]._x1
        y = cs_array[n-1-i][n-1-j]._y + CS_Y1_TO_DRAIN
        Via34_drain2ME3[n-1-i][n-1-j] = Component(lib_name, inst_name, x, y)

##### Step 7: create Via34 to ME4 port #####
# port to ME4
# Precaution:
# 1. create a port list 'Via34_port2ME3' to contain port 'Component'
# 2. lib_name = VIA34_LIB_NAME
# 3. inst_name = 'Via34_port2ME3_'
# TODO
Via34_port2ME3 = [[Component for j in range(int(n/2))] for i in range(n)] #4*8
for i in range(int(n/2)): #n/2
    for j in range(int(n/2)): 
        lib_name = VIA34_LIB_NAME
        # left units
        inst_name = 'Via34_port2ME3_' + str(i * (int(n/2)) + j)
        x = ME3_specialnet[i][j]._x1
        y = ME4_specialnet_port[i*NumOfM3+j]._y1
        #y = int(ME3_specialnet[i][j]._y1 + ((i * int(n/2) + j)-int((i * int(n/2) + j)/NumOfM4)) * (M4_SPACING+M4_WIDTH) + int((i * (int(n/2)) + j)/NumOfM4) *Dy)
        #print((i * int(n/2) + j)-int((i * int(n/2) + j)/((k**0.5)/2)),"* M4_SPACING", int((i * (int(n/2)) + j)/((k**0.5)/2)),"*Dy")
        print("x:",x,"y:",y)
        Via34_port2ME3[i][j] = Component(lib_name,inst_name,x,y)
        # right units 
        inst_name = 'Via34_port2ME3_' + str(i * (int(n/2)) + j + k)
        x = ME3_specialnet[n-1-i][j]._x1
        y=y
        Via34_port2ME3[n-1-i][j] = Component(lib_name,inst_name,x,y)

# write info to def file
component_list = []
for i in range(n):
    for j in range(n):
        component_list.append(cs_array[i][j])
print("# of cs_array",len(component_list))

# 4. add 'Via34_port2ME3' component to 'component_list'
# TODO
t = len(component_list)
for i in range(n):
    for j in range(int(n/2)):
        #print("via34_port2ME3[i][j]:",i," ",j, " ",Via34_port2ME3[i][j]._x, Via34_port2ME3[i][j]._y )
        component_list.append(Via34_port2ME3[i][j])
print("# of Via34_port2ME3",len(component_list)-t)

specialnet_list = []
for i in range(n):
    for j in range(int(n/2)):
        specialnet_list.append(ME3_specialnet[i][j])

for i in range(n):
    for j in range(n):
        specialnet_list.append(ME4_specialnet_drain[i][j])

for i in range(n*NumOfM4):
    specialnet_list.append(ME4_specialnet_port[i])

t = len(component_list)
for i in range(n):
    for j in range(n):
        component_list.append(Via34_drain2ME3[i][j])

print("# of Via34_drain2ME3:",len(component_list)-t)
file_name = './DEF/CS_4.def'
write_def(file_name, die, component_list, specialnet_list)
